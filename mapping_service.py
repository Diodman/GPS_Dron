import folium
import webbrowser
import os
import tempfile
import threading
import logging

class MappingService:
    def __init__(self):
        self.temp_dir = tempfile.mkdtemp(prefix="drone_maps_")
        self.logger = logging.getLogger(__name__)
    
    def create_selection_map(self, city_name, center_point=None, on_click_callback=None):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ—á–µ–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤
            if center_point is None:
                center_point = self._get_city_center(city_name)
            
            self.logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤—ã–±–æ—Ä–∞ –¥–ª—è {city_name}, —Ü–µ–Ω—Ç—Ä: {center_point}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º –º–∞—Å—à—Ç–∞–±–æ–º –¥–ª—è –≥–æ—Ä–æ–¥–∞
            zoom_level = self._get_optimal_zoom(city_name)
            m = folium.Map(location=center_point, zoom_start=zoom_level, tiles='OpenStreetMap')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–ª–∏–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            m.add_child(folium.LatLngPopup())
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
            instructions = f"""
            <div style="position:fixed;top:10px;right:10px;z-index:1000;background:white;padding:15px;border-radius:8px;max-width:300px;box-shadow:0 2px 10px rgba(0,0,0,0.2);">
                <h4 style='color:#2E7D32;margin-top:0;'>üó∫Ô∏è –í—ã–±–æ—Ä —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞</h4>
                <p><strong>–ì–æ—Ä–æ–¥:</strong> {city_name}</p>
                <p>1. –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ—á–∫–∏</p>
                <p>2. –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –≤–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–º –æ–∫–Ω–µ</p>
                <p>3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É</p>
                <p style="color:#666;font-size:12px;margin-bottom:0;">–§–æ—Ä–º–∞—Ç: —à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞</p>
            </div>
            """
            m.get_root().html.add_child(folium.Element(instructions))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞
            folium.Marker(
                center_point,
                popup=f"–¶–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞ {city_name}",
                icon=folium.Icon(color='blue', icon='home')
            ).add_to(m)
            
            filename = os.path.join(self.temp_dir, f"selection_map_{self._sanitize_name(city_name)}.html")
            m.save(filename)
            
            self.logger.info(f"–ö–∞—Ä—Ç–∞ –≤—ã–±–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filename}")
            return filename
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –≤—ã–±–æ—Ä–∞: {e}")
            return None
    
    def create_route_map(self, city_name, routes, drone_types):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ –¥—Ä–æ–Ω–æ–≤"""
        try:
            if not routes:
                self.logger.warning("–ù–µ—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                return None
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã
            center = routes[0][2][0] if routes[0][2] else self._get_city_center(city_name)
            
            self.logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è {city_name}, {len(routes)} –º–∞—Ä—à—Ä—É—Ç–æ–≤")
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
            zoom_level = self._get_optimal_zoom(city_name)
            m = folium.Map(location=center, zoom_start=zoom_level, tiles='OpenStreetMap')
            
            # –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
            colors = ['#4285F4', '#EA4335', '#FBBC05', '#34A853', '#9C27B0', '#FF9800', '#795548', '#607D8B']
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
            for i, (path, length, coords) in enumerate(routes):
                try:
                    if not coords or len(coords) < 2:
                        self.logger.warning(f"–ü—Ä–æ–ø—É—Å–∫ –º–∞—Ä—à—Ä—É—Ç–∞ {i+1}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")
                        # –ï—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –æ–¥–Ω–æ–π —Ç–æ—á–∫–∏, —Å–æ–∑–¥–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –º–∞—Ä–∫–µ—Ä
                        if len(coords) == 1:
                            folium.Marker(
                                coords[0], 
                                popup=f"üöÅ –î—Ä–æ–Ω {i+1} ({drone_types[i] if i < len(drone_types) else 'cargo'})<br>–¢–æ—á–∫–∞: {coords[0][0]:.6f}, {coords[0][1]:.6f}",
                                icon=folium.Icon(color='blue', icon='info-sign', prefix='fa')
                            ).add_to(m)
                        continue
                    
                    color = colors[i % len(colors)]
                    drone_type = drone_types[i] if i < len(drone_types) else "cargo"
                    
                    # –°–æ–∑–¥–∞–µ–º –ª–∏–Ω–∏—é –º–∞—Ä—à—Ä—É—Ç–∞
                    folium.PolyLine(
                        coords, 
                        color=color, 
                        weight=6,
                        opacity=0.8,
                        tooltip=f"–î—Ä–æ–Ω {i+1} ({drone_type}): {length:.1f}–º"
                    ).add_to(m)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã —Å—Ç–∞—Ä—Ç–∞ –∏ —Ñ–∏–Ω–∏—à–∞
                    folium.Marker(
                        coords[0], 
                        popup=f"üöÅ –°—Ç–∞—Ä—Ç –¥—Ä–æ–Ω–∞ {i+1}<br>–¢–∏–ø: {drone_type}<br>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {coords[0][0]:.6f}, {coords[0][1]:.6f}",
                        icon=folium.Icon(color='green', icon='play', prefix='fa')
                    ).add_to(m)
                    
                    folium.Marker(
                        coords[-1], 
                        popup=f"üèÅ –§–∏–Ω–∏—à –¥—Ä–æ–Ω–∞ {i+1}<br>–î–ª–∏–Ω–∞: {length:.1f}–º<br>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {coords[-1][0]:.6f}, {coords[-1][1]:.6f}",
                        icon=folium.Icon(color='red', icon='stop', prefix='fa')
                    ).add_to(m)
                    
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ {i+1}: {e}")
                    continue
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–∞—Ö
            route_info = f"""
            <div style="position:fixed;top:10px;left:10px;z-index:1000;background:white;padding:15px;border-radius:8px;max-width:300px;box-shadow:0 2px 10px rgba(0,0,0,0.2);">
                <h4 style='color:#1976D2;margin-top:0;'>üöÅ –ú–∞—Ä—à—Ä—É—Ç—ã –¥—Ä–æ–Ω–æ–≤</h4>
                <p><strong>–ì–æ—Ä–æ–¥:</strong> {city_name}</p>
                <p><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤:</strong> {len(routes)}</p>
                <p><strong>–û–±—â–∞—è –¥–ª–∏–Ω–∞:</strong> {sum(r[1] for r in routes):.1f}–º</p>
                <div style="margin-top:10px;">
                    <p style="margin:5px 0;font-size:12px;"><span style="color:#4285F4;">‚óè</span> –°–∏–Ω–∏–π - –î—Ä–æ–Ω 1</p>
                    <p style="margin:5px 0;font-size:12px;"><span style="color:#EA4335;">‚óè</span> –ö—Ä–∞—Å–Ω—ã–π - –î—Ä–æ–Ω 2</p>
                    <p style="margin:5px 0;font-size:12px;"><span style="color:#FBBC05;">‚óè</span> –ñ—ë–ª—Ç—ã–π - –î—Ä–æ–Ω 3</p>
                    <p style="margin:5px 0;font-size:12px;"><span style="color:#34A853;">‚óè</span> –ó–µ–ª—ë–Ω—ã–π - –î—Ä–æ–Ω 4</p>
                </div>
            </div>
            """
            m.get_root().html.add_child(folium.Element(route_info))
            
            filename = os.path.join(self.temp_dir, f"route_map_{self._sanitize_name(city_name)}.html")
            m.save(filename)
            
            self.logger.info(f"–ö–∞—Ä—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filename}")
            return filename
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤: {e}")
            return None
    
    def open_map(self, filename):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ"""
        if not filename or not os.path.exists(filename):
            self.logger.warning(f"–§–∞–π–ª –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω: {filename}")
            return False
        
        def open_browser():
            try:
                abs_path = os.path.abspath(filename)
                webbrowser.open(f"file://{abs_path}")
                self.logger.info(f"–ö–∞—Ä—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {abs_path}")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç—ã: {e}")
        
        threading.Thread(target=open_browser, daemon=True).start()
        return True
    
    def _get_city_center(self, city_name):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤"""
        city_centers = {
            '–≤–æ–ª–≥–æ–≥—Ä–∞–¥': (48.7080, 44.5133),
            'volgograd': (48.7080, 44.5133),
            '–º–æ—Å–∫–≤–∞': (55.7558, 37.6176),
            'moscow': (55.7558, 37.6176),
            '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥': (59.9311, 30.3609),
            'st petersburg': (59.9311, 30.3609),
            'st. petersburg': (59.9311, 30.3609),
            'petersburg': (59.9311, 30.3609),
            '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': (56.8431, 60.6454),
            'yekaterinburg': (56.8431, 60.6454),
            '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': (55.0084, 82.9357),
            'novosibirsk': (55.0084, 82.9357),
            '–∫–∞–∑–∞–Ω—å': (55.8304, 49.0661),
            'kazan': (55.8304, 49.0661),
            '–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥': (56.3269, 44.0075),
            'nizhny novgorod': (56.3269, 44.0075),
            '—á–µ–ª—è–±–∏–Ω—Å–∫': (55.1644, 61.4368),
            'chelyabinsk': (55.1644, 61.4368),
            '—Å–∞–º–∞—Ä–∞': (53.2001, 50.1500),
            'samara': (53.2001, 50.1500),
            '–æ–º—Å–∫': (54.9885, 73.3242),
            'omsk': (54.9885, 73.3242),
            '—Ä–æ—Å—Ç–æ–≤-–Ω–∞-–¥–æ–Ω—É': (47.2357, 39.7015),
            'rostov-on-don': (47.2357, 39.7015),
            '—É—Ñ–∞': (54.7388, 55.9721),
            'ufa': (54.7388, 55.9721)
        }
        
        normalized_name = city_name.lower().strip()
        for key, center in city_centers.items():
            if key in normalized_name:
                return center
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ü–µ–Ω—Ç—Ä –í–æ–ª–≥–æ–≥—Ä–∞–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return (48.7080, 44.5133)
    
    def _get_optimal_zoom(self, city_name):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≥–æ—Ä–æ–¥–∞"""
        city_zooms = {
            '–≤–æ–ª–≥–æ–≥—Ä–∞–¥': 11,
            'volgograd': 11,
            '–º–æ—Å–∫–≤–∞': 10,
            'moscow': 10,
            '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥': 10,
            'st petersburg': 10,
            'st. petersburg': 10,
            'petersburg': 10,
            '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 11,
            'yekaterinburg': 11,
            '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': 10,
            'novosibirsk': 10,
            '–∫–∞–∑–∞–Ω—å': 11,
            'kazan': 11,
            '–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥': 11,
            'nizhny novgorod': 11,
            '—á–µ–ª—è–±–∏–Ω—Å–∫': 11,
            'chelyabinsk': 11,
            '—Å–∞–º–∞—Ä–∞': 11,
            'samara': 11,
            '–æ–º—Å–∫': 11,
            'omsk': 11,
            '—Ä–æ—Å—Ç–æ–≤-–Ω–∞-–¥–æ–Ω—É': 11,
            'rostov-on-don': 11,
            '—É—Ñ–∞': 11,
            'ufa': 11
        }
        
        normalized_name = city_name.lower().strip()
        for key, zoom in city_zooms.items():
            if key in normalized_name:
                return zoom
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–∞—Å—à—Ç–∞–± –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤
        return 12
    
    def _sanitize_name(self, name):
        """–û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        import re
        name = re.sub(r'[^\w\s-]', '', name)
        return re.sub(r'[-\s]+', '_', name).strip('_')[:50]