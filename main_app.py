import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import threading
from data_service import DataService
from graph_service import GraphService
from routing_service import RoutingService
from mapping_service import MappingService

class ModernDroneRoutePlanner:
    def __init__(self, root):
        self.root = root
        self.root.title("üöÅ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥—Ä–æ–Ω–æ–≤")
        self.root.geometry("1000x700")
        self.root.configure(bg='#f0f0f0')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        self.data_service = DataService()
        self.graph_service = GraphService()
        self.routing_service = RoutingService(self.graph_service)
        self.mapping_service = MappingService()
        
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.data_service.add_progress_callback(self.update_progress)
        self.graph_service.add_progress_callback(self.update_progress)
        self.routing_service.add_progress_callback(self.update_progress)
        
        self.current_city = None
        self.last_route = None
        
        self.setup_ui()
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # Main frame
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Configure grid weights
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        
        # Header
        header = ttk.Label(main_frame, text="üöÅ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥—Ä–æ–Ω–æ–≤", 
                          font=('Arial', 16, 'bold'), foreground='#2E7D32')
        header.grid(row=0, column=0, columnspan=2, pady=(0, 20))
        
        # Input fields
        ttk.Label(main_frame, text="üèôÔ∏è –ì–æ—Ä–æ–¥:", font=('Arial', 10)).grid(row=1, column=0, sticky=tk.W, pady=5)
        self.city_entry = ttk.Entry(main_frame, width=40, font=('Arial', 10))
        self.city_entry.insert(0, "Berlin, Germany")
        self.city_entry.grid(row=1, column=1, sticky=(tk.W, tk.E), pady=5, padx=(10, 0))
        
        ttk.Label(main_frame, text="üìç –°—Ç–∞—Ä—Ç (—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞):", font=('Arial', 10)).grid(row=2, column=0, sticky=tk.W, pady=5)
        self.start_entry = ttk.Entry(main_frame, width=40, font=('Arial', 10))
        self.start_entry.insert(0, "52.521918, 13.413215")
        self.start_entry.grid(row=2, column=1, sticky=(tk.W, tk.E), pady=5, padx=(10, 0))
        
        ttk.Label(main_frame, text="üéØ –§–∏–Ω–∏—à (—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞):", font=('Arial', 10)).grid(row=3, column=0, sticky=tk.W, pady=5)
        self.end_entry = ttk.Entry(main_frame, width=40, font=('Arial', 10))
        self.end_entry.insert(0, "52.516275, 13.377704")
        self.end_entry.grid(row=3, column=1, sticky=(tk.W, tk.E), pady=5, padx=(10, 0))
        
        # Buttons frame
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=4, column=0, columnspan=2, pady=20)
        
        self.load_btn = ttk.Button(button_frame, text="üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞", 
                                  command=self.load_city_data, width=20)
        self.load_btn.pack(side=tk.LEFT, padx=5)
        
        self.route_btn = ttk.Button(button_frame, text="üõ£Ô∏è –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç", 
                                   command=self.calculate_route, width=20)
        self.route_btn.pack(side=tk.LEFT, padx=5)
        
        self.map_btn = ttk.Button(button_frame, text="üó∫Ô∏è –ö–∞—Ä—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ—á–µ–∫", 
                                 command=self.open_selection_map, width=20)
        self.map_btn.pack(side=tk.LEFT, padx=5)
        
        self.show_btn = ttk.Button(button_frame, text="üìä –ü–æ–∫–∞–∑–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç", 
                                  command=self.show_route_map, width=20)
        self.show_btn.pack(side=tk.LEFT, padx=5)
        
        # Progress bar
        ttk.Label(main_frame, text="–ü—Ä–æ–≥—Ä–µ—Å—Å:", font=('Arial', 10)).grid(row=5, column=0, sticky=tk.W, pady=(20, 5))
        self.progress_bar = ttk.Progressbar(main_frame, mode='determinate', length=400)
        self.progress_bar.grid(row=5, column=1, sticky=(tk.W, tk.E), pady=(20, 5), padx=(10, 0))
        
        self.progress_label = ttk.Label(main_frame, text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", font=('Arial', 9), foreground='#666')
        self.progress_label.grid(row=6, column=1, sticky=tk.W, padx=(10, 0))
        
        # Results notebook
        notebook = ttk.Notebook(main_frame)
        notebook.grid(row=7, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S), pady=20)
        
        # Log tab
        log_frame = ttk.Frame(notebook, padding=10)
        self.log_text = scrolledtext.ScrolledText(log_frame, width=80, height=12, font=('Consolas', 9))
        self.log_text.pack(fill=tk.BOTH, expand=True)
        notebook.add(log_frame, text="üìã –õ–æ–≥")
        
        # Results tab
        result_frame = ttk.Frame(notebook, padding=10)
        self.result_text = scrolledtext.ScrolledText(result_frame, width=80, height=12, font=('Consolas', 9))
        self.result_text.pack(fill=tk.BOTH, expand=True)
        notebook.add(result_frame, text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        
        # Status bar
        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        status_bar = ttk.Label(main_frame, textvariable=self.status_var, relief=tk.SUNKEN, anchor=tk.W)
        status_bar.grid(row=8, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(10, 0))
        
        self.log("=== –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥—Ä–æ–Ω–æ–≤ –∑–∞–ø—É—â–µ–Ω ===")
        self.log("1. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Berlin, Germany)")
        self.log("2. –ù–∞–∂–º–∏—Ç–µ '–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞'")
        self.log("3. –£–∫–∞–∂–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å—Ç–∞—Ä—Ç–∞ –∏ —Ñ–∏–Ω–∏—à–∞")
        self.log("4. –ù–∞–∂–º–∏—Ç–µ '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç'")
    
    def log(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        self.log_text.config(state=tk.NORMAL)
        self.log_text.insert(tk.END, f"{message}\n")
        self.log_text.see(tk.END)
        self.log_text.config(state=tk.DISABLED)
    
    def update_progress(self, stage, percentage, message=""):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
        def update():
            self.progress_bar['value'] = percentage
            self.progress_label.config(text=message)
            self.status_var.set(message)
            if message:
                self.log(f"[{stage.upper()}] {message} ({percentage}%)")
        
        self.root.after(0, update)
    
    def load_city_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞"""
        city_name = self.city_entry.get().strip()
        if not city_name:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞")
            return
        
        def load_thread():
            try:
                self.load_btn.config(state='disabled')
                self.log(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è: {city_name}")
                
                # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                city_data = self.data_service.get_city_data(city_name)
                
                # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞
                city_graph = self.graph_service.build_city_graph(city_data)
                self.routing_service.city_graphs[city_name] = city_graph
                
                self.current_city = city_name
                stats = f"–£–∑–ª–æ–≤: {len(city_graph.nodes)}, –†–µ–±–µ—Ä: {len(city_graph.edges)}"
                self.log(f"‚úì –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {stats}")
                
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–î–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ '{city_name}' –∑–∞–≥—Ä—É–∂–µ–Ω—ã\n{stats}")
                
            except Exception as e:
                error_msg = str(e)
                self.log(f"‚úó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {error_msg}")
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {error_msg}")
            finally:
                self.load_btn.config(state='normal')
        
        threading.Thread(target=load_thread, daemon=True).start()
    
    def calculate_route(self):
        """–†–∞—Å—á–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∞"""
        if not self.current_city:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞")
            return
        
        try:
            start_text = self.start_entry.get().strip()
            end_text = self.end_entry.get().strip()
            
            # –ü–∞—Ä—Å–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            start_lat, start_lon = map(float, [x.strip() for x in start_text.split(',')])
            end_lat, end_lon = map(float, [x.strip() for x in end_text.split(',')])
            
            start = (start_lat, start_lon)
            end = (end_lat, end_lon)
            
            self.log(f"–†–∞—Å—á–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∞ –æ—Ç {start} –¥–æ {end}")
            
            def route_thread():
                try:
                    self.route_btn.config(state='disabled')
                    path, length, coords = self.routing_service.plan_route(
                        self.current_city, start, end
                    )
                    
                    if not path:
                        self.log("‚úó –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        messagebox.showwarning("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç")
                        return
                    
                    self.last_route = coords
                    
                    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    self.result_text.delete(1.0, tk.END)
                    self.result_text.insert(tk.END, f"‚úÖ –ú–ê–†–®–†–£–¢ –ü–û–°–¢–†–û–ï–ù\n")
                    self.result_text.insert(tk.END, f"–ì–æ—Ä–æ–¥: {self.current_city}\n")
                    self.result_text.insert(tk.END, f"–ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞: {length:.2f} –∫–º\n")
                    self.result_text.insert(tk.END, f"–¢–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞: {len(coords)}\n\n")
                    self.result_text.insert(tk.END, "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∞:\n")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–æ—á–∫–∏
                    for i, (lat, lon) in enumerate(coords[:5]):
                        self.result_text.insert(tk.END, f"{i+1:2d}. {lat:.6f}, {lon:.6f}\n")
                    
                    if len(coords) > 5:
                        self.result_text.insert(tk.END, "...\n")
                        for i, (lat, lon) in enumerate(coords[-3:], len(coords)-2):
                            self.result_text.insert(tk.END, f"{i+1:2d}. {lat:.6f}, {lon:.6f}\n")
                    
                    self.log("‚úì –ú–∞—Ä—à—Ä—É—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω!")
                    
                except Exception as e:
                    error_msg = str(e)
                    self.log(f"‚úó –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {error_msg}")
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞: {error_msg}")
                finally:
                    self.route_btn.config(state='normal')
            
            threading.Thread(target=route_thread, daemon=True).start()
            
        except ValueError:
            self.log("‚úó –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç. –ü—Ä–∏–º–µ—Ä: 52.521918, 13.413215")
        except Exception as e:
            error_msg = str(e)
            self.log(f"‚úó –û—à–∏–±–∫–∞: {error_msg}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞: {error_msg}")
    
    def open_selection_map(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ—á–µ–∫"""
        city_name = self.city_entry.get().strip()
        if not city_name:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞")
            return
        
        def map_thread():
            try:
                self.log("–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ—á–µ–∫...")
                filename = self.mapping_service.create_clickable_map(city_name)
                if filename:
                    success = self.mapping_service.open_map(filename)
                    if success:
                        self.log("–ö–∞—Ä—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ—á–µ–∫ –æ—Ç–∫—Ä—ã—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
                    else:
                        self.log("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É")
                else:
                    self.log("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã")
            except Exception as e:
                self.log(f"‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã: {str(e)}")
        
        threading.Thread(target=map_thread, daemon=True).start()
    
    def show_route_map(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç –Ω–∞ –∫–∞—Ä—Ç–µ"""
        if not self.last_route:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –ø–æ—Å—Ç—Ä–æ–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç")
            return
        
        def map_thread():
            try:
                self.log("–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∞...")
                filename = self.mapping_service.create_route_map(
                    self.current_city, self.last_route
                )
                if filename:
                    success = self.mapping_service.open_map(filename)
                    if success:
                        self.log("–ö–∞—Ä—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
                    else:
                        self.log("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É –º–∞—Ä—à—Ä—É—Ç–∞")
                else:
                    self.log("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∞")
            except Exception as e:
                self.log(f"‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∞: {str(e)}")
        
        threading.Thread(target=map_thread, daemon=True).start()

if __name__ == "__main__":
    root = tk.Tk()
    app = ModernDroneRoutePlanner(root)
    root.mainloop()