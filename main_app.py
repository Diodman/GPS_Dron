import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import threading
import logging
from data_service import DataService
from graph_service import GraphService
from routing_service import RoutingService
from mapping_service import MappingService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('drone_planner.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

class ModernDroneRoutePlanner:
    def __init__(self, root):
        self.root = root
        self.root.title("üöÅ Advanced Drone Route Planner")
        self.root.geometry("1400x900")
        self.root.configure(bg='#f5f5f5')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.logger = logging.getLogger(__name__)
        self.logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥—Ä–æ–Ω–æ–≤")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
            self.data_service = DataService()
            self.graph_service = GraphService()
            self.routing_service = RoutingService(self.graph_service)
            self.mapping_service = MappingService()
            
            # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            self.data_service.add_progress_callback(self.update_progress)
            self.graph_service.add_progress_callback(self.update_progress)
            self.routing_service.add_progress_callback(self.update_progress)
            
            self.current_city = None
            self.last_routes = []
            self.drone_points = []
            self.drone_types = []
            
            self.setup_ui()
            self.logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
            messagebox.showerror("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {e}")
            raise
    
    def setup_ui(self):
        # Configure main grid
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        
        # Main notebook
        self.notebook = ttk.Notebook(self.root)
        self.notebook.grid(row=0, column=0, sticky='nsew', padx=10, pady=10)
        
        # Setup tabs
        self.setup_route_tab()
        self.setup_management_tab()
        self.setup_log_tab()
        
        # Status bar
        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        status_bar = ttk.Label(self.root, textvariable=self.status_var, relief=tk.SUNKEN, anchor=tk.W)
        status_bar.grid(row=1, column=0, sticky='ew', padx=10, pady=(0, 10))
    
    def setup_route_tab(self):
        # Route planning tab
        route_frame = ttk.Frame(self.notebook, padding=20)
        self.notebook.add(route_frame, text="üó∫Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤")
        
        # Configure grid
        route_frame.columnconfigure(1, weight=1)
        route_frame.rowconfigure(5, weight=1)
        
        # City selection
        ttk.Label(route_frame, text="üèôÔ∏è –ì–æ—Ä–æ–¥:", font=('Arial', 11, 'bold')).grid(row=0, column=0, sticky='w', pady=5)
        self.city_entry = ttk.Entry(route_frame, width=40, font=('Arial', 10))
        self.city_entry.insert(0, "Volgograd, Russia")
        self.city_entry.grid(row=0, column=1, sticky='ew', pady=5, padx=(10, 0))
        
        ttk.Button(route_frame, text="üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", command=self.load_city_data, width=20).grid(row=0, column=2, padx=10)
        
        # Drone configuration
        config_frame = ttk.LabelFrame(route_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥—Ä–æ–Ω–æ–≤", padding=10)
        config_frame.grid(row=1, column=0, columnspan=3, sticky='ew', pady=10)
        config_frame.columnconfigure(1, weight=1)
        
        ttk.Label(config_frame, text="–¢–∏–ø –¥—Ä–æ–Ω–∞:").grid(row=0, column=0, sticky='w', pady=2)
        self.drone_type = tk.StringVar(value="cargo")
        drone_combo = ttk.Combobox(config_frame, textvariable=self.drone_type, width=20, state='readonly')
        drone_combo['values'] = ('cargo', 'operator', 'cleaner')
        drone_combo.grid(row=0, column=1, sticky='w', pady=2, padx=(10, 0))
        
        ttk.Label(config_frame, text="–£—Ä–æ–≤–µ–Ω—å –±–∞—Ç–∞—Ä–µ–∏ (%):").grid(row=0, column=2, sticky='w', pady=2, padx=(20, 0))
        self.battery_var = tk.StringVar(value="100")
        ttk.Entry(config_frame, textvariable=self.battery_var, width=10).grid(row=0, column=3, sticky='w', pady=2, padx=(10, 0))
        
        ttk.Label(config_frame, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä–æ–Ω–æ–≤:").grid(row=1, column=0, sticky='w', pady=2)
        self.drone_count = tk.StringVar(value="1")
        ttk.Entry(config_frame, textvariable=self.drone_count, width=10).grid(row=1, column=1, sticky='w', pady=2, padx=(10, 0))
        
        # Points management
        points_frame = ttk.LabelFrame(route_frame, text="–¢–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞", padding=10)
        points_frame.grid(row=2, column=0, columnspan=3, sticky='ew', pady=10)
        points_frame.columnconfigure(1, weight=1)
        
        # Address input
        ttk.Label(points_frame, text="–ê–¥—Ä–µ—Å –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:").grid(row=0, column=0, sticky='w', pady=2)
        self.address_entry = ttk.Entry(points_frame, width=30)
        self.address_entry.grid(row=0, column=1, sticky='ew', pady=2, padx=(10, 0))
        self.address_entry.bind('<Return>', lambda e: self.add_point())
        
        ttk.Button(points_frame, text="üìç –î–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫—É", command=self.add_point, width=15).grid(row=0, column=2, padx=(10, 0))
        ttk.Button(points_frame, text="üó∫Ô∏è –í—ã–±—Ä–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ", command=self.open_selection_map, width=15).grid(row=0, column=3, padx=(10, 0))
        
        # Points list
        list_frame = ttk.Frame(points_frame)
        list_frame.grid(row=1, column=0, columnspan=4, sticky='ew', pady=(10, 0))
        list_frame.columnconfigure(0, weight=1)
        
        ttk.Label(list_frame, text="–¢–µ–∫—É—â–∏–µ —Ç–æ—á–∫–∏:").grid(row=0, column=0, sticky='w')
        self.points_listbox = tk.Listbox(list_frame, height=6, font=('Arial', 9))
        self.points_listbox.grid(row=1, column=0, columnspan=3, sticky='nsew', pady=5)
        
        # Listbox buttons
        btn_frame = ttk.Frame(list_frame)
        btn_frame.grid(row=1, column=3, sticky='ns', padx=(10, 0))
        
        ttk.Button(btn_frame, text="‚¨ÜÔ∏è", command=self.move_point_up, width=5).pack(pady=2)
        ttk.Button(btn_frame, text="‚¨áÔ∏è", command=self.move_point_down, width=5).pack(pady=2)
        ttk.Button(btn_frame, text="‚úñÔ∏è", command=self.remove_point, width=5).pack(pady=2)
        ttk.Button(btn_frame, text="üßπ", command=self.clear_points, width=5).pack(pady=2)
        
        # Route actions
        action_frame = ttk.Frame(route_frame)
        action_frame.grid(row=3, column=0, columnspan=3, pady=20)
        
        ttk.Button(action_frame, text="üõ£Ô∏è –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã", command=self.calculate_routes, 
                  style='Accent.TButton', width=20).pack(side=tk.LEFT, padx=5)
        ttk.Button(action_frame, text="üìä –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ", command=self.show_routes_map, 
                  width=20).pack(side=tk.LEFT, padx=5)
        ttk.Button(action_frame, text="üíæ –≠–∫—Å–ø–æ—Ä—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤", command=self.export_routes, 
                  width=20).pack(side=tk.LEFT, padx=5)
        
        # Progress
        ttk.Label(route_frame, text="–ü—Ä–æ–≥—Ä–µ—Å—Å:", font=('Arial', 10)).grid(row=4, column=0, sticky='w', pady=(10, 5))
        self.progress_bar = ttk.Progressbar(route_frame, mode='determinate')
        self.progress_bar.grid(row=4, column=1, columnspan=2, sticky='ew', pady=(10, 5), padx=(10, 0))
        
        self.progress_label = ttk.Label(route_frame, text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", font=('Arial', 9), foreground='#666')
        self.progress_label.grid(row=5, column=0, columnspan=3, sticky='w')
        
        # Results
        results_frame = ttk.LabelFrame(route_frame, text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", padding=10)
        results_frame.grid(row=6, column=0, columnspan=3, sticky='nsew', pady=10)
        results_frame.columnconfigure(0, weight=1)
        results_frame.rowconfigure(0, weight=1)
        
        self.results_text = scrolledtext.ScrolledText(results_frame, width=60, height=12, font=('Consolas', 9))
        self.results_text.pack(fill=tk.BOTH, expand=True)
    
    def setup_management_tab(self):
        # Drone management tab
        management_frame = ttk.Frame(self.notebook, padding=20)
        self.notebook.add(management_frame, text="üöÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—Ä–æ–Ω–∞–º–∏")
        
        ttk.Label(management_frame, text="–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—Ä–æ–Ω–∞–º–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", 
                 font=('Arial', 14), foreground='#666').pack(expand=True)
    
    def setup_log_tab(self):
        # Log tab
        log_frame = ttk.Frame(self.notebook, padding=10)
        self.notebook.add(log_frame, text="üìã –õ–æ–≥ —Å–∏—Å—Ç–µ–º—ã")
        
        self.log_text = scrolledtext.ScrolledText(log_frame, width=80, height=20, font=('Consolas', 9))
        self.log_text.pack(fill=tk.BOTH, expand=True)
        
        # Add initial log message
        self.log("=== –°–∏—Å—Ç–µ–º–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥—Ä–æ–Ω–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞ ===")
        self.log("–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:")
        self.log("1. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ")
        self.log("2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥—Ä–æ–Ω–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.log("3. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ (–∞–¥—Ä–µ—Å –∏–ª–∏ –≤—ã–±–æ—Ä –Ω–∞ –∫–∞—Ä—Ç–µ)")
        self.log("4. –ü–æ—Å—Ç—Ä–æ–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç—ã")
    
    def log(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        self.log_text.config(state=tk.NORMAL)
        self.log_text.insert(tk.END, f"{message}\n")
        self.log_text.see(tk.END)
        self.log_text.config(state=tk.DISABLED)
    
    def update_progress(self, stage, percentage, message=""):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
        def update():
            self.progress_bar['value'] = percentage
            self.progress_label.config(text=message)
            self.status_var.set(message)
            if message:
                self.log(f"[{stage.upper()}] {message}")
        
        self.root.after(0, update)
    
    def load_city_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        city_name = self.city_entry.get().strip()
        if not city_name:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞")
            return
        
        def load_thread():
            try:
                self.logger.info(f"–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è: {city_name}")
                self.log(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è: {city_name}")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
                city_data = self.data_service.get_city_data(city_name)
                if not city_data:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ—Ä–æ–∂–Ω–æ–π —Å–µ—Ç–∏
                if 'road_graph' not in city_data or len(city_data['road_graph'].nodes) == 0:
                    raise Exception("–î–æ—Ä–æ–∂–Ω–∞—è —Å–µ—Ç—å –≥–æ—Ä–æ–¥–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                
                drone_type = self.drone_type.get()
                
                # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ –≥–æ—Ä–æ–¥–∞
                city_graph = self.graph_service.build_city_graph(city_data, drone_type)
                if len(city_graph.nodes) == 0:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ –≥–æ—Ä–æ–¥–∞")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
                self.routing_service.city_graphs[city_name] = city_graph
                self.current_city = city_name
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats = city_data.get('stats', {})
                nodes_count = stats.get('nodes', len(city_graph.nodes))
                edges_count = stats.get('edges', len(city_graph.edges))
                buildings_count = stats.get('buildings', 0)
                
                stats_text = f"–£–∑–ª–æ–≤: {nodes_count}, –†–µ–±–µ—Ä: {edges_count}"
                if buildings_count > 0:
                    stats_text += f", –ó–¥–∞–Ω–∏–π: {buildings_count}"
                
                self.log(f"‚úì –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {stats_text}")
                self.logger.info(f"–î–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ '{city_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {stats_text}")
                
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–î–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ '{city_name}' –∑–∞–≥—Ä—É–∂–µ–Ω—ã\n{stats_text}")
                
            except Exception as e:
                error_msg = str(e)
                self.log(f"‚úó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {error_msg}")
                self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {city_name}: {error_msg}")
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:\n{error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n2. –£–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞\n3. –î–æ–±–∞–≤–∏—Ç—å 'Russia' –∫ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞")
        
        threading.Thread(target=load_thread, daemon=True).start()
    
    def add_point(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
        address = self.address_entry.get().strip()
        if not address:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫
        if len(self.drone_points) >= 10:
            messagebox.showwarning("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ", "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫: 10")
            return
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        if ',' in address:
            try:
                coords = tuple(map(float, [x.strip() for x in address.split(',')]))
                if len(coords) == 2:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                    if -90 <= coords[0] <= 90 and -180 <= coords[1] <= 180:
                        point_text = f"{coords[0]:.6f}, {coords[1]:.6f}"
                        self.drone_points.append(coords)
                        self.points_listbox.insert(tk.END, point_text)
                        self.address_entry.delete(0, tk.END)
                        self.log(f"‚úì –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–æ—á–∫–∞: {point_text}")
                        self.logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–æ—á–∫–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: {coords}")
                        return
                    else:
                        messagebox.showwarning("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:\n–®–∏—Ä–æ—Ç–∞: -90 –¥–æ 90\n–î–æ–ª–≥–æ—Ç–∞: -180 –¥–æ 180")
                        return
            except ValueError:
                pass
        
        # –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
        def geocode_thread():
            try:
                self.log(f"–ü–æ–∏—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è: {address}")
                # –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
                coords = self.data_service.address_to_coords(address, self.current_city)
                if coords:
                    point_text = f"{coords[0]:.6f}, {coords[1]:.6f} ({address})"
                    self.drone_points.append(coords)
                    self.points_listbox.insert(tk.END, point_text)
                    self.address_entry.delete(0, tk.END)
                    self.log(f"‚úì –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–æ—á–∫–∞: {address} ‚Üí {coords}")
                    self.logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–æ—á–∫–∞ –ø–æ –∞–¥—Ä–µ—Å—É '{address}': {coords}")
                else:
                    error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–¥—Ä–µ—Å: {address}"
                    self.log(f"‚úó {error_msg}")
                    self.logger.warning(error_msg)
                    if self.current_city:
                        messagebox.showerror("–û—à–∏–±–∫–∞", f"{error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n1. –£–∫–∞–∑–∞—Ç—å –±–æ–ª–µ–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å\n2. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∞–¥—Ä–µ—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ {self.current_city}\n3. –í–≤–µ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞")
                    else:
                        messagebox.showerror("–û—à–∏–±–∫–∞", f"{error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n1. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞\n2. –£–∫–∞–∑–∞—Ç—å –±–æ–ª–µ–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å\n3. –í–≤–µ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞")
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"
                self.log(f"‚úó {error_msg}")
                self.logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è '{address}': {e}")
                messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
        
        threading.Thread(target=geocode_thread, daemon=True).start()
    
    def remove_point(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—á–∫–∏"""
        selection = self.points_listbox.curselection()
        if selection:
            index = selection[0]
            self.points_listbox.delete(index)
            self.drone_points.pop(index)
            self.log("‚úì –¢–æ—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
    
    def clear_points(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–æ—á–µ–∫"""
        self.points_listbox.delete(0, tk.END)
        self.drone_points = []
        self.log("‚úì –í—Å–µ —Ç–æ—á–∫–∏ –æ—á–∏—â–µ–Ω—ã")
    
    def move_point_up(self):
        """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –≤–≤–µ—Ä—Ö"""
        selection = self.points_listbox.curselection()
        if selection and selection[0] > 0:
            index = selection[0]
            # Swap in listbox
            text = self.points_listbox.get(index)
            self.points_listbox.delete(index)
            self.points_listbox.insert(index-1, text)
            self.points_listbox.select_set(index-1)
            # Swap in points list
            self.drone_points[index], self.drone_points[index-1] = self.drone_points[index-1], self.drone_points[index]
    
    def move_point_down(self):
        """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –≤–Ω–∏–∑"""
        selection = self.points_listbox.curselection()
        if selection and selection[0] < len(self.drone_points) - 1:
            index = selection[0]
            # Swap in listbox
            text = self.points_listbox.get(index)
            self.points_listbox.delete(index)
            self.points_listbox.insert(index+1, text)
            self.points_listbox.select_set(index+1)
            # Swap in points list
            self.drone_points[index], self.drone_points[index+1] = self.drone_points[index+1], self.drone_points[index]
    
    def open_selection_map(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ—á–µ–∫"""
        if not self.current_city:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞")
            return
        
        def map_thread():
            try:
                filename = self.mapping_service.create_selection_map(self.current_city)
                if filename:
                    self.mapping_service.open_map(filename)
                    self.log("–ö–∞—Ä—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ—á–µ–∫ –æ—Ç–∫—Ä—ã—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
            except Exception as e:
                self.log(f"‚úó –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç—ã: {str(e)}")
        
        threading.Thread(target=map_thread, daemon=True).start()
    
    def calculate_routes(self):
        """–†–∞—Å—á–µ—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –¥—Ä–æ–Ω–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        if not self.current_city:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞")
            return
        
        if len(self.drone_points) < 2:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã 2 —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞")
            return
        
        try:
            drone_type = self.drone_type.get()
            battery_level = float(self.battery_var.get())
            
            if battery_level <= 0 or battery_level > 100:
                messagebox.showwarning("–û—à–∏–±–∫–∞", "–£—Ä–æ–≤–µ–Ω—å –±–∞—Ç–∞—Ä–µ–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 100%")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ç–æ—á–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö –≥–æ—Ä–æ–¥–∞
            if not self._validate_points_in_city():
                messagebox.showwarning("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç –≥–æ—Ä–æ–¥–∞.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–µ–∫.")
                return
            
            # Create point pairs for multiple drones
            num_drones = min(int(self.drone_count.get()), len(self.drone_points) - 1)
            point_pairs = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
            for i in range(num_drones):
                start = self.drone_points[i % len(self.drone_points)]
                end = self.drone_points[(i + 1) % len(self.drone_points)]
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
                distance = self._calculate_distance(start, end)
                
                if distance < 10:  # –ú–µ–Ω–µ–µ 10 –º–µ—Ç—Ä–æ–≤
                    self.log(f"‚ö†Ô∏è –û—á–µ–Ω—å –±–ª–∏–∑–∫–∏–µ —Ç–æ—á–∫–∏ {i+1}: {distance:.1f} –º")
                    if not messagebox.askyesno("–ë–ª–∏–∑–∫–∏–µ —Ç–æ—á–∫–∏", 
                                             f"–¢–æ—á–∫–∏ {i+1} –Ω–∞—Ö–æ–¥—è—Ç—Å—è –æ—á–µ–Ω—å –±–ª–∏–∑–∫–æ –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É: {distance:.1f} –º\n"
                                             f"–ú–∞—Ä—à—Ä—É—Ç –±—É–¥–µ—Ç –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–º.\n"
                                             f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"):
                        return
                elif distance > 50000:  # 50 –∫–º
                    self.log(f"‚ö†Ô∏è –ë–æ–ª—å—à–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ {i+1}: {distance/1000:.1f} –∫–º")
                    if not messagebox.askyesno("–ë–æ–ª—å—à–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ", 
                                             f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ {i+1}: {distance/1000:.1f} –∫–º\n"
                                             f"–≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø—Ä–æ–±–ª–µ–º–∞–º —Å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π.\n"
                                             f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"):
                        return
                
                point_pairs.append((start, end))
                self.drone_types.append(drone_type)
            
            self.log(f"–†–∞—Å—á–µ—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è {num_drones} –¥—Ä–æ–Ω–æ–≤ —Ç–∏–ø–∞ '{drone_type}'...")
            
            def route_thread():
                try:
                    routes = self.routing_service.plan_routes(
                        self.current_city, point_pairs, drone_type, battery_level
                    )
                    
                    if not routes:
                        self.log("‚úó –ú–∞—Ä—à—Ä—É—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                        messagebox.showwarning("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã.\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n1. –¢–æ—á–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞\n2. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Ä–æ–∂–Ω–æ–π —Å–µ—Ç–∏ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏\n3. –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –±–∞—Ç–∞—Ä–µ–∏")
                        return
                    
                    self.last_routes = routes
                    
                    # Display results
                    self.results_text.delete(1.0, tk.END)
                    self.results_text.insert(tk.END, "‚úÖ –ú–ê–†–®–†–£–¢–´ –ü–û–°–¢–†–û–ï–ù–´\n\n")
                    
                    for i, (path, length, coords) in enumerate(routes):
                        self.results_text.insert(tk.END, f"–î—Ä–æ–Ω {i+1} ({drone_type}):\n")
                        self.results_text.insert(tk.END, f"  –î–ª–∏–Ω–∞: {length:.1f} –º\n")
                        self.results_text.insert(tk.END, f"  –¢–æ—á–µ–∫: {len(coords)}\n")
                        self.results_text.insert(tk.END, f"  –°—Ç–∞—Ä—Ç: {coords[0][0]:.6f}, {coords[0][1]:.6f}\n")
                        self.results_text.insert(tk.END, f"  –§–∏–Ω–∏—à: {coords[-1][0]:.6f}, {coords[-1][1]:.6f}\n\n")
                    
                    self.log(f"‚úì –ü–æ—Å—Ç—Ä–æ–µ–Ω–æ {len(routes)} –º–∞—Ä—à—Ä—É—Ç–æ–≤")
                    
                except Exception as e:
                    error_msg = str(e)
                    self.log(f"‚úó –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {error_msg}")
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {error_msg}")
            
            threading.Thread(target=route_thread, daemon=True).start()
            
        except ValueError:
            self.log("‚úó –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö")
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            error_msg = str(e)
            self.log(f"‚úó –û—à–∏–±–∫–∞: {error_msg}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞: {error_msg}")
    
    def _validate_points_in_city(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤—Å–µ —Ç–æ—á–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –≥—Ä–∞–Ω–∏—Ü–∞—Ö –≥–æ—Ä–æ–¥–∞"""
        if not self.current_city:
            return True
        
        city_bounds = {
            '–≤–æ–ª–≥–æ–≥—Ä–∞–¥': {'lat': (48.5, 49.0), 'lon': (44.0, 45.0)},
            'volgograd': {'lat': (48.5, 49.0), 'lon': (44.0, 45.0)},
        }
        
        normalized_city = self.current_city.lower().strip()
        if ', russia' in normalized_city:
            normalized_city = normalized_city[:-8].strip()
        
        bounds = None
        for city_key, city_bounds_data in city_bounds.items():
            if city_key in normalized_city:
                bounds = city_bounds_data
                break
        
        if not bounds:
            return True  # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ, —Å—á–∏—Ç–∞–µ–º —Ç–æ—á–∫–∏ –≤–∞–ª–∏–¥–Ω—ã–º–∏
        
        for i, point in enumerate(self.drone_points):
            lat, lon = point
            if not (bounds['lat'][0] <= lat <= bounds['lat'][1] and bounds['lon'][0] <= lon <= bounds['lon'][1]):
                self.log(f"‚úó –¢–æ—á–∫–∞ {i+1} ({lat:.6f}, {lon:.6f}) –Ω–µ –≤ –≥—Ä–∞–Ω–∏—Ü–∞—Ö –≥–æ—Ä–æ–¥–∞")
                return False
        
        return True
    
    def _calculate_distance(self, point1, point2):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –≤ –º–µ—Ç—Ä–∞—Ö"""
        import math
        
        lat1, lon1 = point1
        lat2, lon2 = point2
        
        # –§–æ—Ä–º—É–ª–∞ –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –Ω–∞ —Å—Ñ–µ—Ä–µ
        R = 6371000  # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
        
        lat1_rad = math.radians(lat1)
        lat2_rad = math.radians(lat2)
        delta_lat = math.radians(lat2 - lat1)
        delta_lon = math.radians(lon2 - lon1)
        
        a = (math.sin(delta_lat / 2) ** 2 + 
             math.cos(lat1_rad) * math.cos(lat2_rad) * 
             math.sin(delta_lon / 2) ** 2)
        c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
        
        distance = R * c
        return distance
    
    def show_routes_map(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã –Ω–∞ –∫–∞—Ä—Ç–µ"""
        if not self.last_routes:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –ø–æ—Å—Ç—Ä–æ–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç—ã")
            return
        
        def map_thread():
            try:
                filename = self.mapping_service.create_route_map(
                    self.current_city, self.last_routes, self.drone_types
                )
                if filename:
                    self.mapping_service.open_map(filename)
                    self.log("–ö–∞—Ä—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –æ—Ç–∫—Ä—ã—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
            except Exception as e:
                self.log(f"‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã: {str(e)}")
        
        threading.Thread(target=map_thread, daemon=True).start()
    
    def export_routes(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
        if not self.last_routes:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–ù–µ—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ —Ñ–∞–π–ª
        self.log("‚úì –ú–∞—Ä—à—Ä—É—Ç—ã –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        messagebox.showinfo("–≠–∫—Å–ø–æ—Ä—Ç", "–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

if __name__ == "__main__":
    root = tk.Tk()
    app = ModernDroneRoutePlanner(root)
    root.mainloop()